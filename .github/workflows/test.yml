name: Test

# Controls when the action will run. 
on:
  pull_request:
  
  # Allows to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  package: AceLayout
  scheme: AceLayout
  
  coverage_macos_name: coverage-macos
  coverage_macos_path: coverage-macos.lcov
  
  coverage_tvos_name: coverage-tvos
  coverage_tvos_path: coverage-tvos.json

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  test_on_macos:
    runs-on: macos-latest
    
    steps:
      # Checks-out the repository under $GITHUB_WORKSPACE, so this job can access it
      - uses: actions/checkout@v2
      
      - name: Build for macOS
        run: swift build
        
      - name: Run tests on macOS
        run: swift test --enable-code-coverage
        
      - name: Gather code coverage
        run: >
          xcrun llvm-cov export
          .build/debug/${{ env.package }}PackageTests.xctest/Contents/MacOS/${{ env.package }}PackageTests
          -instr-profile .build/debug/codecov/default.profdata
          -ignore-filename-regex Tests
          -format lcov
          > ${{ env.coverage_macos_path }}
          
      - name: Save the coverage file
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.coverage_macos_name }}
          path: ${{ env.coverage_macos_path }}
          
  test_on_ios:
    runs-on: macos-latest
    
    env:
      IOS_SIMULATOR: "iPhone 13"
    
    steps:
      - uses: actions/checkout@v2
      
      - name: Build for iOS
        run: xcodebuild build -scheme ${{ env.scheme }} -destination "name=${{ env.IOS_SIMULATOR }}"
        
      - name: Run tests on iOS
        run: xcodebuild test -scheme ${{ env.scheme }} -destination "name=${{ env.IOS_SIMULATOR }}"
        
  test_on_tvos:
    runs-on: macos-latest
    
    env:
      TVOS_SIMULATOR: "Apple TV"
      RESULT_BUNDLE_PATH: TestResults/tvOS.xcresult
    
    steps:
      - uses: actions/checkout@v2
      
      - name: Build for tvOS
        run: xcodebuild build -scheme ${{ env.scheme }} -destination "name=${{ env.TVOS_SIMULATOR }}"
        
      - name: Run tests on tvOS
        run: >
          xcodebuild test
          -scheme ${{ env.scheme }}
          -destination "name=${{ env.TVOS_SIMULATOR }}"
          -enableCodeCoverage YES
          -resultBundlePath ${{ env.RESULT_BUNDLE_PATH }}
          
      - name: Gather code coverage
        run: >
          xcrun xccov view ${{ env.RESULT_BUNDLE_PATH }}
          --report
          --json
          --files-for-target ${{ env.package }}
          > ${{ env.coverage_tvos_path }}
          
      - name: Save the coverage file
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.coverage_tvos_name }}
          path: ${{ env.coverage_tvos_path }}
          
  upload_coverage:
    runs-on: macos-latest
    needs: [test_on_macos, test_on_tvos]
    
    steps:
      - uses: actions/checkout@v2
      
      - name: Load the coverage file
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.coverage_macos_name }}
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ${{ env.coverage_macos_path }},${{ env.coverage_tvos_path }}
          verbose: true
